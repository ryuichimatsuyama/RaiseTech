AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  MasterUserPassword:
    Description: "Master password for the RDS instance"
    Type: String
    NoEcho: true

Resources:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2
      SecurityGroups:
        - !ImportValue ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-alb-cfn'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Name: ALBTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !ImportValue VPC
      Targets:
        - Id: !Ref EC2Instance
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALBTargetGroup-cfn'

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.small
      ImageId: ami-04ff98ccbfa41c9ad
      SubnetId: !ImportValue PublicSubnet1
      SecurityGroupIds:
        - !ImportValue EC2SecurityGroup
      IamInstanceProfile: !Ref EC2IAMProfile
      KeyName: "raisetech"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ec2-cfn'

  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "EC2IAMRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2IAMRole-cfn'

  EC2IAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2IAMRole

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !ImportValue PrivateSubnet1
        - !ImportValue PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-RDSSubnetGroup-cfn'

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: !Ref MasterUserPassword
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref RDSSubnetGroup
      MultiAZ: false
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !ImportValue RDSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-RDSInstance-cfn'

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-bucket-raisetechlaos'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-S3Bucket-cfn'

Outputs:
  BucketName:
    Description: "The name of the S3 bucket"  
    Value: !Ref S3Bucket

  PublicIpAddress:
    Description: "The public IP address of the EC2 instance"
    Value: !GetAtt EC2Instance.PublicIp

  ALBEndpoint:
    Description: "The DNS name of the ALB"
    Value: !GetAtt ALB.DNSName

  RDSEndpoint:
    Description: "The endpoint address of the RDS instance"
    Value: !GetAtt RDSInstance.Endpoint.Address
